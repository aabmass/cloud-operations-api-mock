// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock_trace_service.proto

package mocktrace

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next available id: 2
type GetNumSpansResponse struct {
	NumSpans             int32    `protobuf:"varint,1,opt,name=num_spans,json=numSpans,proto3" json:"num_spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNumSpansResponse) Reset()         { *m = GetNumSpansResponse{} }
func (m *GetNumSpansResponse) String() string { return proto.CompactTextString(m) }
func (*GetNumSpansResponse) ProtoMessage()    {}
func (*GetNumSpansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_819c37506e2b5275, []int{0}
}

func (m *GetNumSpansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNumSpansResponse.Unmarshal(m, b)
}
func (m *GetNumSpansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNumSpansResponse.Marshal(b, m, deterministic)
}
func (m *GetNumSpansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNumSpansResponse.Merge(m, src)
}
func (m *GetNumSpansResponse) XXX_Size() int {
	return xxx_messageInfo_GetNumSpansResponse.Size(m)
}
func (m *GetNumSpansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNumSpansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNumSpansResponse proto.InternalMessageInfo

func (m *GetNumSpansResponse) GetNumSpans() int32 {
	if m != nil {
		return m.NumSpans
	}
	return 0
}

// Next available id: 2
type SetDelayRequest struct {
	Duration             *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SetDelayRequest) Reset()         { *m = SetDelayRequest{} }
func (m *SetDelayRequest) String() string { return proto.CompactTextString(m) }
func (*SetDelayRequest) ProtoMessage()    {}
func (*SetDelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_819c37506e2b5275, []int{1}
}

func (m *SetDelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDelayRequest.Unmarshal(m, b)
}
func (m *SetDelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDelayRequest.Marshal(b, m, deterministic)
}
func (m *SetDelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDelayRequest.Merge(m, src)
}
func (m *SetDelayRequest) XXX_Size() int {
	return xxx_messageInfo_SetDelayRequest.Size(m)
}
func (m *SetDelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDelayRequest proto.InternalMessageInfo

func (m *SetDelayRequest) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNumSpansResponse)(nil), "api.GetNumSpansResponse")
	proto.RegisterType((*SetDelayRequest)(nil), "api.SetDelayRequest")
}

func init() {
	proto.RegisterFile("mock_trace_service.proto", fileDescriptor_819c37506e2b5275)
}

var fileDescriptor_819c37506e2b5275 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xf4, 0x30,
	0x10, 0x86, 0x77, 0xf9, 0xf8, 0x64, 0xcd, 0x1e, 0x94, 0x28, 0x52, 0xbb, 0x20, 0xd2, 0x93, 0x97,
	0xa6, 0x50, 0xf1, 0xa2, 0x17, 0x5d, 0x56, 0xf4, 0xa2, 0x87, 0xd6, 0x93, 0x97, 0x92, 0x66, 0xc7,
	0x1a, 0xb6, 0xcd, 0xc4, 0x26, 0x11, 0xf6, 0x67, 0xf8, 0x8f, 0xa5, 0xcd, 0x56, 0x64, 0xd5, 0x5b,
	0xc8, 0x3c, 0xbc, 0xef, 0x33, 0x0c, 0x09, 0x1a, 0x14, 0xab, 0xc2, 0xb6, 0x5c, 0x40, 0x61, 0xa0,
	0x7d, 0x97, 0x02, 0x98, 0x6e, 0xd1, 0x22, 0xfd, 0xc7, 0xb5, 0x0c, 0x4f, 0x2a, 0xc4, 0xaa, 0x86,
	0xa4, 0xff, 0x2a, 0xdd, 0x4b, 0xb2, 0x74, 0x2d, 0xb7, 0x12, 0x95, 0x87, 0xc2, 0xd9, 0xf6, 0x1c,
	0x1a, 0x6d, 0xd7, 0x7e, 0x18, 0xa5, 0xe4, 0xe0, 0x0e, 0xec, 0xa3, 0x6b, 0x72, 0xcd, 0x95, 0xc9,
	0xc0, 0x68, 0x54, 0x06, 0xe8, 0x8c, 0xec, 0x2a, 0xd7, 0x14, 0xa6, 0xfb, 0x0c, 0xc6, 0xa7, 0xe3,
	0xb3, 0xff, 0xd9, 0x44, 0x6d, 0xa0, 0xe8, 0x9e, 0xec, 0xe5, 0x60, 0x17, 0x50, 0xf3, 0x75, 0x06,
	0x6f, 0x0e, 0x8c, 0xa5, 0x17, 0x64, 0x32, 0xb4, 0xf6, 0xf8, 0x34, 0x3d, 0x66, 0xbe, 0x96, 0x0d,
	0xb5, 0x6c, 0xb1, 0x01, 0xb2, 0x2f, 0x34, 0xfd, 0x18, 0x93, 0xfd, 0x07, 0x14, 0xab, 0xa7, 0x6e,
	0xb7, 0xdc, 0xaf, 0x46, 0x6f, 0xc8, 0xf4, 0x9b, 0x12, 0x3d, 0xfa, 0x11, 0x74, 0xdb, 0xf9, 0x87,
	0x01, 0xe3, 0x5a, 0xb2, 0x5f, 0xe4, 0xa3, 0x11, 0xbd, 0x24, 0x93, 0xc1, 0x90, 0x1e, 0xf6, 0xdc,
	0x96, 0x70, 0xf8, 0x47, 0x6a, 0x34, 0x9a, 0xcf, 0x9f, 0xaf, 0x2b, 0x69, 0x5f, 0x5d, 0xc9, 0x04,
	0x36, 0x89, 0xa7, 0xa4, 0xb2, 0xd0, 0x2a, 0x93, 0x88, 0x1a, 0xdd, 0x32, 0x46, 0x0d, 0xde, 0xdf,
	0xc4, 0x5c, 0xcb, 0xb8, 0xbb, 0x4e, 0xc2, 0xb5, 0xbc, 0xea, 0x1e, 0xfd, 0x95, 0xca, 0x9d, 0x3e,
	0xf5, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xfb, 0xad, 0x13, 0xba, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MockTraceServiceClient is the client API for MockTraceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockTraceServiceClient interface {
	GetNumSpans(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNumSpansResponse, error)
	SetDelay(ctx context.Context, in *SetDelayRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mockTraceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockTraceServiceClient(cc grpc.ClientConnInterface) MockTraceServiceClient {
	return &mockTraceServiceClient{cc}
}

func (c *mockTraceServiceClient) GetNumSpans(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNumSpansResponse, error) {
	out := new(GetNumSpansResponse)
	err := c.cc.Invoke(ctx, "/api.MockTraceService/GetNumSpans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockTraceServiceClient) SetDelay(ctx context.Context, in *SetDelayRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.MockTraceService/SetDelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockTraceServiceServer is the server API for MockTraceService service.
type MockTraceServiceServer interface {
	GetNumSpans(context.Context, *empty.Empty) (*GetNumSpansResponse, error)
	SetDelay(context.Context, *SetDelayRequest) (*empty.Empty, error)
}

// UnimplementedMockTraceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMockTraceServiceServer struct {
}

func (*UnimplementedMockTraceServiceServer) GetNumSpans(ctx context.Context, req *empty.Empty) (*GetNumSpansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumSpans not implemented")
}
func (*UnimplementedMockTraceServiceServer) SetDelay(ctx context.Context, req *SetDelayRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelay not implemented")
}

func RegisterMockTraceServiceServer(s *grpc.Server, srv MockTraceServiceServer) {
	s.RegisterService(&_MockTraceService_serviceDesc, srv)
}

func _MockTraceService_GetNumSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockTraceServiceServer).GetNumSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MockTraceService/GetNumSpans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockTraceServiceServer).GetNumSpans(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockTraceService_SetDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockTraceServiceServer).SetDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MockTraceService/SetDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockTraceServiceServer).SetDelay(ctx, req.(*SetDelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MockTraceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MockTraceService",
	HandlerType: (*MockTraceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumSpans",
			Handler:    _MockTraceService_GetNumSpans_Handler,
		},
		{
			MethodName: "SetDelay",
			Handler:    _MockTraceService_SetDelay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mock_trace_service.proto",
}
